{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import{composeWithDevTools}from'redux-devtools-extension';import thunk from'redux-thunk';import rootReducer from'./reducers';import setAuthToken from'./utils/setAuthToken';var initialState={};var middleware=[thunk];var store=createStore(rootReducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));// set up a store subscription listener\n// to store the users token in localStorage\n// prevent auth error on first run of subscription\nvar currentState={auth:{token:null}};store.subscribe(function(){// keep track of the previous and current state to compare changes\nvar previousState=currentState;currentState=store.getState();// if the token changes set the value in localStorage and axios headers\nif(previousState.auth.token!==currentState.auth.token){var token=currentState.auth.token;setAuthToken(token);}});export default store;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/chat app/social media-full/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","auth","token","subscribe","previousState","getState"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,YAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,sBAAzB,CAEA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CAEA,GAAMC,CAAAA,UAAU,CAAG,CAACJ,KAAD,CAAnB,CAEA,GAAMK,CAAAA,KAAK,CAAGR,WAAW,CACvBI,WADuB,CAEvBE,YAFuB,CAGvBJ,mBAAmB,CAACD,eAAe,MAAf,QAAmBM,UAAnB,CAAD,CAHI,CAAzB,CAMA;AACA;AAEA;AACA,GAAIE,CAAAA,YAAY,CAAG,CAAEC,IAAI,CAAE,CAAEC,KAAK,CAAE,IAAT,CAAR,CAAnB,CAEAH,KAAK,CAACI,SAAN,CAAgB,UAAM,CACpB;AACA,GAAIC,CAAAA,aAAa,CAAGJ,YAApB,CACAA,YAAY,CAAGD,KAAK,CAACM,QAAN,EAAf,CACA;AACA,GAAID,aAAa,CAACH,IAAd,CAAmBC,KAAnB,GAA6BF,YAAY,CAACC,IAAb,CAAkBC,KAAnD,CAA0D,CACxD,GAAMA,CAAAA,KAAK,CAAGF,YAAY,CAACC,IAAb,CAAkBC,KAAhC,CACAN,YAAY,CAACM,KAAD,CAAZ,CACD,CACF,CATD,EAWA,cAAeH,CAAAA,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n// set up a store subscription listener\n// to store the users token in localStorage\n\n// prevent auth error on first run of subscription\nlet currentState = { auth: { token: null } };\n\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState();\n  // if the token changes set the value in localStorage and axios headers\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}